// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: grpc/interface.proto

package request

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BiddingServiceClient is the client API for BiddingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BiddingServiceClient interface {
	Handshake(ctx context.Context, in *ClientHandshake, opts ...grpc.CallOption) (*BidResponse, error)
	SendBid(ctx context.Context, in *Bid, opts ...grpc.CallOption) (BiddingService_SendBidClient, error)
	RequestCurrentResult(ctx context.Context, in *Request, opts ...grpc.CallOption) (BiddingService_RequestCurrentResultClient, error)
}

type biddingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBiddingServiceClient(cc grpc.ClientConnInterface) BiddingServiceClient {
	return &biddingServiceClient{cc}
}

func (c *biddingServiceClient) Handshake(ctx context.Context, in *ClientHandshake, opts ...grpc.CallOption) (*BidResponse, error) {
	out := new(BidResponse)
	err := c.cc.Invoke(ctx, "/request.BiddingService/Handshake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biddingServiceClient) SendBid(ctx context.Context, in *Bid, opts ...grpc.CallOption) (BiddingService_SendBidClient, error) {
	stream, err := c.cc.NewStream(ctx, &BiddingService_ServiceDesc.Streams[0], "/request.BiddingService/SendBid", opts...)
	if err != nil {
		return nil, err
	}
	x := &biddingServiceSendBidClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BiddingService_SendBidClient interface {
	Recv() (*BidResponse, error)
	grpc.ClientStream
}

type biddingServiceSendBidClient struct {
	grpc.ClientStream
}

func (x *biddingServiceSendBidClient) Recv() (*BidResponse, error) {
	m := new(BidResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *biddingServiceClient) RequestCurrentResult(ctx context.Context, in *Request, opts ...grpc.CallOption) (BiddingService_RequestCurrentResultClient, error) {
	stream, err := c.cc.NewStream(ctx, &BiddingService_ServiceDesc.Streams[1], "/request.BiddingService/RequestCurrentResult", opts...)
	if err != nil {
		return nil, err
	}
	x := &biddingServiceRequestCurrentResultClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BiddingService_RequestCurrentResultClient interface {
	Recv() (*RequestResponse, error)
	grpc.ClientStream
}

type biddingServiceRequestCurrentResultClient struct {
	grpc.ClientStream
}

func (x *biddingServiceRequestCurrentResultClient) Recv() (*RequestResponse, error) {
	m := new(RequestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BiddingServiceServer is the server API for BiddingService service.
// All implementations must embed UnimplementedBiddingServiceServer
// for forward compatibility
type BiddingServiceServer interface {
	Handshake(context.Context, *ClientHandshake) (*BidResponse, error)
	SendBid(*Bid, BiddingService_SendBidServer) error
	RequestCurrentResult(*Request, BiddingService_RequestCurrentResultServer) error
	mustEmbedUnimplementedBiddingServiceServer()
}

// UnimplementedBiddingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBiddingServiceServer struct {
}

func (UnimplementedBiddingServiceServer) Handshake(context.Context, *ClientHandshake) (*BidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handshake not implemented")
}
func (UnimplementedBiddingServiceServer) SendBid(*Bid, BiddingService_SendBidServer) error {
	return status.Errorf(codes.Unimplemented, "method SendBid not implemented")
}
func (UnimplementedBiddingServiceServer) RequestCurrentResult(*Request, BiddingService_RequestCurrentResultServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestCurrentResult not implemented")
}
func (UnimplementedBiddingServiceServer) mustEmbedUnimplementedBiddingServiceServer() {}

// UnsafeBiddingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BiddingServiceServer will
// result in compilation errors.
type UnsafeBiddingServiceServer interface {
	mustEmbedUnimplementedBiddingServiceServer()
}

func RegisterBiddingServiceServer(s grpc.ServiceRegistrar, srv BiddingServiceServer) {
	s.RegisterService(&BiddingService_ServiceDesc, srv)
}

func _BiddingService_Handshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientHandshake)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiddingServiceServer).Handshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/request.BiddingService/Handshake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiddingServiceServer).Handshake(ctx, req.(*ClientHandshake))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiddingService_SendBid_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Bid)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BiddingServiceServer).SendBid(m, &biddingServiceSendBidServer{stream})
}

type BiddingService_SendBidServer interface {
	Send(*BidResponse) error
	grpc.ServerStream
}

type biddingServiceSendBidServer struct {
	grpc.ServerStream
}

func (x *biddingServiceSendBidServer) Send(m *BidResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BiddingService_RequestCurrentResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BiddingServiceServer).RequestCurrentResult(m, &biddingServiceRequestCurrentResultServer{stream})
}

type BiddingService_RequestCurrentResultServer interface {
	Send(*RequestResponse) error
	grpc.ServerStream
}

type biddingServiceRequestCurrentResultServer struct {
	grpc.ServerStream
}

func (x *biddingServiceRequestCurrentResultServer) Send(m *RequestResponse) error {
	return x.ServerStream.SendMsg(m)
}

// BiddingService_ServiceDesc is the grpc.ServiceDesc for BiddingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BiddingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "request.BiddingService",
	HandlerType: (*BiddingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handshake",
			Handler:    _BiddingService_Handshake_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendBid",
			Handler:       _BiddingService_SendBid_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RequestCurrentResult",
			Handler:       _BiddingService_RequestCurrentResult_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/interface.proto",
}
